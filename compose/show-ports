#!/bin/bash

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$PATH
OS=$(uname -s)

#find the local IP address (use the interface of the default route)
if [[ $OS == "Linux" ]]
then
  default_dev=$(ip route list | sed 's/none //' | awk '/default/ {print $5}')
  IP_addr=$(ip addr show dev $default_dev | awk '$1 == "inet" {print $2}' | head -1 | cut -d/ -f1)
elif [[ $OS == "Darwin" ]]
then
  default_dev=$(netstat -rnf inet | awk '/^default/{print $NF}')
  IP_addr=$(ipconfig getifaddr $default_dev)
fi

#DASHBOARD=$(uname -n)
#GATEWAY=$(uname -n)

DASHBOARD=$IP_addr
GATEWAY=$IP_addr
DASHBOARD_PROTO=http
GATEWAY_PROTO=http

#dashboardPort=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "3000/tcp") 0).HostPort}}' tyk-env_dashboard_1)
dashboardPort=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "3000/tcp") 0).HostPort}}' compose_tyk_dashboard_1)

echo Dashboard: compose_tyk_dashboard_1
echo $DASHBOARD_PROTO://$DASHBOARD:$dashboardPort

echo

echo Gateways:
for GW in 1
do
  GWPort=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "8080/tcp") 0).HostPort}}' compose_tyk_gateway_1)
  echo "compose_tyk_gateway_1 -> $GATEWAY_PROTO://$GATEWAY:$GWPort"
done

echo

for GW in 1
do
  GWPort=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "8080/tcp") 0).HostPort}}' compose_tyk_gateway_1)
  echo curl -k $GATEWAY_PROTO://$GATEWAY:$GWPort/hello
  result=$(curl -sk $GATEWAY_PROTO://$GATEWAY:$GWPort/hello)
  echo $result
done
